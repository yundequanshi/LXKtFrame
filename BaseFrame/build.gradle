apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion build_info.target_sdk
    buildToolsVersion build_info.build_tools

    defaultConfig {
        minSdkVersion build_info.min_sdk
        targetSdkVersion build_info.target_sdk
        versionCode build_info.version_code
        versionName build_info.version_name
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api deps.constraint_layout
    api deps.kotlin.stdlib
    api deps.kotlin.coroutines
    api deps.support.v4
    api deps.support.v7
    api deps.support.design
    api deps.retrofit.runtime
    api deps.retrofit.gson
    api deps.retrofit.adapter_rxjava2
    api deps.okhttp.runtime
    api deps.okhttp.logging_interceptor
    api deps.refresh.runtime
    api deps.refresh.header
    api deps.util_code
    api deps.rx_android
    api deps.eventbus
    api deps.magic_indicator
    api deps.picture
    api deps.anko
    api deps.mmkv
    api deps.flowlayout
    api deps.gif
    api deps.glide_transformations
    api deps.keyboardvisibilityevent
    api deps.checkVersion
    api project(':library')
}

apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.yundequanshi'

// 指定编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}

// 制作文档(Javadoc)
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
